#!/bin/bash

#Autor: Daniel Gomes -  daniel@avantsec.com.b
#Empresa: AvantSec
#TODO_pre: Implementar para as 24 interfaces do PA5220.
#TODO_pos: Pedir endereço do firewall,  pedir uma conta de usuário com senha para conseguir fazer requisições via a API

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

#FW_IP=10.30.0.16 #192.168.101.250 # IP address of the firewall
FW_IP=$1
KEY=LUFRPT1Kdm9MU3FiNnlGbUVnMEFJeW83cGFMUE9mZTA9TitvLy9EQWt2bHdFcjZuVTVRQ1F5VVI2eWVMYXJSU09HZ1NVTU9uL2M4T2VjVXdEYjRieTl1WEpzSVMxNVdvQw==
NEXT_POLL=0
COMUNNITY=public
CONST=T

while [ $CONST = T ]
do

	if [ $NEXT_POLL = 0 ] ; then
		# PEGANDO QUANTIDADE DE CPU UTILIZADA NO MANAGEMENT PLANE
       		#snmpget -v 2c -c $COMUNNITY $FW_IP 1.3.6.1.2.1.25.3.3.1.2.1 | nc -p 9600 localhost # CPU util on management plane
		VALUE_1=$(snmpget -v 2c -c $COMUNNITY $FW_IP 1.3.6.1.2.1.25.3.3.1.2.1 | cut -c50-100)
		#echo "$VALUE_1"
		NEXT_POLL=1
		#sleep 5
	
	
	elif [ $NEXT_POLL = 1 ] ; then
		# PEGANDO QUANTIDADE DE CPU UTILIZADA NO DATA PLANE
		#snmpget -v 2c -c $COMUNNITY $FW_IP 1.3.6.1.2.1.25.3.3.1.2.2 | nc -p 9600 localhost # CPU usage on data plane
		VALUE_2=$(snmpget -v 2c -c $COMUNNITY $FW_IP 1.3.6.1.2.1.25.3.3.1.2.2 | cut -c50-100)
		#echo "$VALUE_2"
		NEXT_POLL=2
		#sleep 5
	
	elif [ $NEXT_POLL = 2 ] ; then
		# PEGANDO QUANTIDADE DE  MEMÓRIA RAM UTILIZADA
		#snmpget -v 2c -c $COMUNNITY $FW_IP 1.3.6.1.2.1.25.2.3 | nc -p 9600 localhost
		DATA=$(snmpwalk -v 2c -c paloaltosnmp! 192.168.101.250 1.3.6.1.2.1.25.2.3)
		echo "$DATA" > mem.info_1.1
		#VALUE_3=$(python mem_process.py)
		#VALUE_3=$(mem)
		python mem_process1.1.py > result1_1.1 ; VALUE_3=$(cat result1_1.1) ; sleep 2 ; rm -f mem.info_1.1
		#echo "$VALUE_3"
		NEXT_POLL=3
		#sleep 5

	elif [ $NEXT_POLL = 3 ] ; then
		#echo "3"
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F1%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1 
		VALUE_4=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=4
	
	elif [ $NEXT_POLL = 4 ] ; then
		#echo "4"
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F2%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
		VALUE_5=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=5

	elif [ $NEXT_POLL = 5 ] ; then
		#echo "5"
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F3%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_6=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=6

	elif [ $NEXT_POLL = 6 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F4%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_7=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=7		

	elif [ $NEXT_POLL = 7 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F5%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_8=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=8

	elif [ $NEXT_POLL = 8 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F6%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_9=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=9

	elif [ $NEXT_POLL = 9 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F7%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_10=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=10

	elif [ $NEXT_POLL = 10 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F8%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_11=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=11

	elif [ $NEXT_POLL = 11 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F9%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_12=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=12

	elif [ $NEXT_POLL = 12 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F10%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_13=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=13

	elif [ $NEXT_POLL = 13 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F11%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_=14$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=14

	elif [ $NEXT_POLL = 14 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F12%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_15=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=15

	elif [ $NEXT_POLL = 15 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F13%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_16=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=16

	elif [ $NEXT_POLL = 16 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F14%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_17=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=17

	elif [ $NEXT_POLL = 17 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F15%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_18=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=18

	elif [ $NEXT_POLL = 18 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F16%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_19=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=19

	elif [ $NEXT_POLL = 19 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F17%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_20=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=20

	elif [ $NEXT_POLL = 20 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F18%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_21=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=21

	elif [ $NEXT_POLL = 21 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F19%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_22=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=22

	elif [ $NEXT_POLL = 22 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F20%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_23=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=23

	elif [ $NEXT_POLL = 23 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F21%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_24=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=24

	elif [ $NEXT_POLL = 24 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F22%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_25=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=25

	elif [ $NEXT_POLL = 25 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F23%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_26=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=26

	elif [ $NEXT_POLL = 26 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=%3Cshow%3E%3Cqos%3E%3Cinterface%3E%3Centry%20name%3D%27ethernet1%2F24%27%3E%3Cthroughput%3E0%3C%2Fthroughput%3E%3C%2Fentry%3E%3C%2Finterface%3E%3C%2Fqos%3E%3C%2Fshow%3E&key='$KEY'')
		echo "$API_RETURN" > xml_1.1
                VALUE_27=$(python file_process1.1.py) ; sleep 2 ; rm -f xml_1.1
		NEXT_POLL=32

	elif [ $NEXT_POLL = 27 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=&key='$KEY'')
		echo "$API_RETURN" > xml
                VALUE_28=$(python file_process1.1.py) ; sleep 2 ; rm -f xml
		NEXT_POLL=28

	elif [ $NEXT_POLL = 28 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=&key='$KEY'')
		echo "$API_RETURN" > xml
                VALUE_29=$(python file_process1.1.py) ; sleep 2 ; rm -f xml
		NEXT_POLL=29

	elif [ $NEXT_POLL = 29 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=&key='$KEY'')
		echo "$API_RETURN" > xml
                VALUE_30=$(python file_process1.1.py) ; sleep 2 ; rm -f xml
		NEXT_POLL=30

	elif [ $NEXT_POLL = 30 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=&key='$KEY'')
		echo "$API_RETURN" > xml
                VALUE_31=$(python file_process1.1.py) ; sleep 2 ; rm -f xml
		NEXT_POLL=31

	elif [ $NEXT_POLL = 31 ] ; then
		API_RETURN=$(curl -k -X GET 'https://'$FW_IP'/api/?type=op&cmd=&key='$KEY'')
		echo "$API_RETURN" > xml
                VALUE_32=$(python file_process1.1.py) ; sleep 2 ; rm -f xml
		NEXT_POLL=32

	elif [ $NEXT_POLL = 32 ] ; then
		#snmpget -v 2c -c $COMUNNITY $FW_IP 1.3.6.1.4.1.25461.2.1.2.3.3.0 | nc -p 9600 localhost # Total active sessions
		VALUE_33=$(snmpget -v 2c -c $COMUNNITY $FW_IP 1.3.6.1.4.1.25461.2.1.2.3.3.0 | cut -c54-100)
		#echo "$VALUE_6"
		NEXT_POLL=33
		#sleep 5
	fi

	
	if [ $NEXT_POLL = 33 ] ; then
		DATE=$(date +%s%3N)
		echo "$DATE;$VALUE_1;$VALUE_2;$VALUE_3;$VALUE_4;$VALUE_5;$VALUE_6;$VALUE_7;$VALUE_8;$VALUE_9;$VALUE_10;$VALUE_11;$VALUE_12;$VALUE_13;$VALUE_14;$VALUE_15;$VALUE_16;$VALUE_17;$VALUE_18;$VALUE_19;$VALUE_20;$VALUE_21;$VALUE_22;$VALUE_23;$VALUE_24;$VALUE_25;$VALUE_26;$VALUE_27;$VALUE_33" 
		CONST=N
		NEXT_POLL=0
	fi

done
